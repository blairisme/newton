/*
 * MIT License (c)
 *
 * This work is licensed under the MIT License. To view a copy of this
 * license, visit
 *
 *      https://opensource.org/licenses/MIT
 *
 * Author: Blair Butterworth
 */

apply plugin: 'idea'
apply plugin: 'jacoco'

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
        vcs = 'Git'
        modules -= project.idea.module
    }
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }
}

subprojects {
    plugins.withType(JavaPlugin) {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    plugins.withType(IdeaPlugin) {
        idea {
            module {
                downloadSources = true

                sourceDirs += file('src/main/java')
                testSourceDirs += file('src/test/java')

                excludeDirs += file('config')
                excludeDirs += file('build')
                excludeDirs += file('bin')
                excludeDirs += file('.gradle')
                excludeDirs += file('.settings')
            }
        }

        afterEvaluate {
            rootProject.idea.project.modules += project.idea.module
        }
    }
}

gradle.projectsEvaluated {
    def javaprojects = projectsWithPlugin('java')

    configure(javaprojects) {
        apply plugin: 'checkstyle'
        apply plugin: 'jacoco'

        checkstyle {
            sourceSets = [project.sourceSets.main]
            configFile = rootProject.file('gradle/config/checkstyle/checkstyle.xml')
        }

        jacocoTestReport {
            additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
            sourceDirectories = files(sourceSets.main.allSource.srcDirs)
            classDirectories = files(sourceSets.main.output)
            reports {
                html.enabled = true
                xml.enabled = true
            }
        }
        /*
        project.tasks.check.dependsOn jacocoTestCoverageVerification
        jacocoTestCoverageVerification {
            sourceDirectories = files(sourceSets.main.allSource.srcDirs)
            classDirectories = files(sourceSets.main.output)

            violationRules {
                rule {
                    limit {
                        minimum = 0.5
                    }
                }
            }
        }
        */
    }

    task report(type: org.gradle.testing.jacoco.tasks.JacocoReport/*, dependsOn: javaprojects.test*/) {
        additionalSourceDirs = files(javaprojects.sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(javaprojects.sourceSets.main.allSource.srcDirs)
        classDirectories = files(javaprojects.sourceSets.main.output)
        executionData = files(javaprojects.collect{javaproject -> javaproject.fileTree(dir: "build/jacoco" , include: '**/*.exec')})

        reports {
            html.enabled = true
            xml.enabled = true
        }
    }

    task clean(type: Delete) {
        delete file('build')
    }
}

def projectsWithPlugin(def pluginName) {
    return subprojects.findAll { subproject -> subproject.plugins.hasPlugin(pluginName) }
}
