apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: database-newton
spec:
  template:
    metadata:
      labels:
        app: database-newton
    spec:
      containers:
      - name: database-newton
        image: newtonkubregistry.azurecr.io/blairisme/newton-database:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3306
      imagePullSecrets:
      - name: my-secret
---
apiVersion: v1
kind: Service
metadata:
  name: database-newton
spec:
  type: LoadBalancer
  ports:
  - port: 3306
  selector:
    app: database-newton
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: master-newton
spec:
  template:
    metadata:
      labels:
        app: master-newton
    spec:
      volumes:
      - name: shared-data
        emptyDir: {}
      - name: shared-data2
        emptyDir: {}
      securityContext:
        fsGroup: 0
        runAsUser: 0
      containers:
      - name: master-newton
        envFrom:
        - configMapRef:
            name: my-env-var
        image: newtonkubregistry.azurecr.io/blairisme/newton:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 9090
        - containerPort: 8443
        volumeMounts:
        - name: shared-data
          mountPath: /root/.newton/experiment
        - name: shared-data2
          mountPath: /root/.newton/data
        securityContext:
          runAsUser: 0
      - name: jupyter-newton
        envFrom:
        - configMapRef:
            name: my-env-var
        image: newtonkubregistry.azurecr.io/blairisme/newton-jupyter:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        - containerPort: 8888
        volumeMounts:
        - name: shared-data
          mountPath: /home/newton/experiment
        - name: shared-data2
          mountPath: /home/newton/data
        securityContext:
          runAsUser: 0
      imagePullSecrets:
      - name: my-secret
---
apiVersion: v1
kind: Service
metadata:
  name: master-newton
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 9090
    targetPort: 9090
  - name: jupyter
    port: 8000
    targetPort: 8000
  - name: jupyter2
    port: 8888
    targetPort: 8888
  - name: sshport
    port: 8443
    targetPort: 8443
  selector:
    app: master-newton
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: slave-newton
spec:
  template:
    metadata:
      labels:
        app: slave-newton
    spec: 
      containers:
      - name: slave-newton
        envFrom:
        - configMapRef:
            name: my-env-var
        image: newtonkubregistry.azurecr.io/blairisme/newton-slave:latest
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 200m
          requests:
            cpu: 100m
        ports:
        - containerPort: 8080
      imagePullSecrets:
      - name: my-secret
---
apiVersion: v1
kind: Service
metadata:
  name: slave-newton
spec:
  type: LoadBalancer
  ports:
  - port: 8080
  selector:
    app: slave-newton
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: newton-autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: slave-newton
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 50
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-env-var
data:
  slave_host: 'slave-newton'
  slave_port: '8080'
  application_host: 'slave-newton'
  application_port: '8080'
  database_host: 'database-newton'
  database_port: '3306'
  database_user: 'root'
  database_password: 'Newton*123'
  jupyter_host: '51.140.55.146'
  jupyter_port: '8000'
  master_host: 'master-newton'
  master_port: '9090'
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: EnsureExists
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:metrics-server
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: EnsureExists
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "extensions"
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:metrics-server
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: EnsureExists
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: metrics-server-auth-reader
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: EnsureExists
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: metrics-server:system:auth-delegator
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: EnsureExists
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: v1
kind: Service
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: EnsureExists
    kubernetes.io/name: "Metrics-server"
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    k8s-app: metrics-server
  ports:
  - port: 443
    protocol: TCP
    targetPort: 443
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    k8s-app: metrics-server
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: EnsureExists
spec:
  selector:
    matchLabels:
      k8s-app: metrics-server
  template:
    metadata:
      name: metrics-server
      labels:
        k8s-app: metrics-server
    spec:
      serviceAccountName: metrics-server
      containers:
      - name: metrics-server
        image: gcr.io/google_containers/metrics-server-amd64:v0.2.1
        imagePullPolicy: Always
        command:
        - /metrics-server
        - --source=kubernetes.summary_api:''
      nodeSelector:
        beta.kubernetes.io/os: linux
---
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: EnsureExists
spec:
  service:
    name: metrics-server
    namespace: kube-system
  group: metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100